[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog\nJulia TimeSeries methods 1"
  },
  {
    "objectID": "posts/PeaceBridge2003/index.html",
    "href": "posts/PeaceBridge2003/index.html",
    "title": "longer seasonal timeseries",
    "section": "",
    "text": "PeaceBridge2012 seasonal time series\n\n\n\n\n\n\nNote\n\n\n\nPeaceBridge2003 记录了PeaceBridge 大桥的长期的通行车辆记录\n\nseasonal timeseries linear Regression\n使用 GLM.jl 线性回归方法\n\n\n\n\n加载软件包\n\n\nCode\n    include(\"utils.jl\")\n    using  RCall\n    using  GLMakie,DataFrames,Pipe,PrettyTables,DataFramesMeta,FreqTables\n    using  StatsBase,TableTransforms\n    using  GLM,AnovaGLM,HypothesisTests\n    res=(600,300)\n\n\n(600, 300)\n\n\n\n\n1. load data\n\n\nCode\n        desc=Stat2Table(1412,\"PeaceBridge2003\",\"seasonal time series\",[\"Year\", \"Month\", \"Traffic\", \"t\"])\n        data=@pipe load_rda(desc.name)\n        ts=tspan=data[:,:t]\n        traffic=data[:,:Traffic]\n        @pt first(data,3)\n\n\n┌───────┬───────┬─────────┬───────┐\n│  Year │ Month │ Traffic │     t │\n│ Int32 │ Int32 │ Float64 │ Int32 │\n├───────┼───────┼─────────┼───────┤\n│  2003 │     1 │   511.4 │     1 │\n│  2003 │     2 │   468.7 │     2 │\n│  2003 │     3 │   551.4 │     3 │\n└───────┴───────┴─────────┴───────┘\n\n\n\n\n2. plot timerseries\nFigure 1 : PeaceBridge2003 series plot\n\n\nCode\n fig1,ax1,plt1=scatterlines(data[:,:t],data[:,:Traffic];marker_style...,linewidth=4,figure = (; resolution = res))\n\n\n\n\n\nFigure 1: PeaceBridge2003\n\n\n\n\n\n\n3. fit two models: 1:cosine model 2: season model\n\n\nCode\n        cost(t)=cos(2pi*t/12); sint(t)=sin(2pi*t/12)\n        cosine_model=lm(@formula(Traffic~t+cost(t)+sint(t)), data)\n        season_model=lm(@formula(Traffic ~t+Month), data, contrasts = Dict(:Month =&gt; DummyCoding()))\n        mds=[cosine_model,season_model]\n\n\n2-element Vector{StatsModels.TableRegressionModel{LinearModel{GLM.LmResp{Vector{Float64}}, GLM.DensePredChol{Float64, LinearAlgebra.CholeskyPivoted{Float64, Matrix{Float64}, Vector{Int64}}}}, Matrix{Float64}}}:\n StatsModels.TableRegressionModel{LinearModel{GLM.LmResp{Vector{Float64}}, GLM.DensePredChol{Float64, LinearAlgebra.CholeskyPivoted{Float64, Matrix{Float64}, Vector{Int64}}}}, Matrix{Float64}}\n\nTraffic ~ 1 + t + :(cost(t)) + :(sint(t))\n\nCoefficients:\n────────────────────────────────────────────────────────────────────────────\n                  Coef.  Std. Error       t  Pr(&gt;|t|)  Lower 95%   Upper 95%\n────────────────────────────────────────────────────────────────────────────\n(Intercept)  601.503       7.25186    82.94    &lt;1e-99  587.176    615.831\nt             -0.980999    0.080168  -12.24    &lt;1e-23   -1.13939   -0.822612\ncost(t)      -86.3254      5.09676   -16.94    &lt;1e-36  -96.395    -76.2558\nsint(t)      -77.77        5.1049    -15.23    &lt;1e-31  -87.8557   -67.6843\n────────────────────────────────────────────────────────────────────────────\n StatsModels.TableRegressionModel{LinearModel{GLM.LmResp{Vector{Float64}}, GLM.DensePredChol{Float64, LinearAlgebra.CholeskyPivoted{Float64, Matrix{Float64}, Vector{Int64}}}}, Matrix{Float64}}\n\nTraffic ~ 1 + t + Month\n\nCoefficients:\n────────────────────────────────────────────────────────────────────────────\n                  Coef.  Std. Error       t  Pr(&gt;|t|)  Lower 95%   Upper 95%\n────────────────────────────────────────────────────────────────────────────\n(Intercept)  490.857       7.27524    67.47    &lt;1e-99  476.476    505.238\nt             -0.978972    0.042343  -23.12    &lt;1e-49   -1.06267   -0.895273\nMonth: 2     -10.1672      9.31403    -1.09    0.2768  -28.5781     8.24378\nMonth: 3      82.1964      9.31431     8.82    &lt;1e-14   63.7849   100.608\nMonth: 4      64.4831      9.3148      6.92    &lt;1e-09   46.0706    82.8956\nMonth: 5     119.608       9.31547    12.84    &lt;1e-24  101.194    138.022\nMonth: 6     150.703       9.31633    16.18    &lt;1e-33  132.287    169.118\nMonth: 7     268.635       9.31739    28.83    &lt;1e-60  250.218    287.053\nMonth: 8     296.714       9.31864    31.84    &lt;1e-66  278.294    315.134\nMonth: 9     133.001       9.32009    14.27    &lt;1e-28  114.578    151.424\nMonth: 10    115.057       9.32172    12.34    &lt;1e-23   96.6307   133.483\nMonth: 11     63.382       9.32355     6.80    &lt;1e-09   44.9522    81.8118\nMonth: 12     42.2302      9.32557     4.53    &lt;1e-04   23.7965    60.664\n────────────────────────────────────────────────────────────────────────────\n\n\n\n\n4. plot fitline\n\n\nCode\n        yhat1=predict(mds[1],select(data,:t))\n        yhat2=predict(mds[2],select(data,[:Month,:t]))\n        function plot_two_reg()\n            yr=unique(data[:,:Year]).|&gt;Symbol.|&gt;String\n            tr=Vector(1:12:length(data[:,:t]))\n            fig=Figure(resolution=(1400,400))\n            ax1=Axis(fig[1,1];xlabel=\"time\",ylabel=\"traffic\",title=L\"Linear+Cossine\")\n            ax2=Axis(fig[1,2];xlabel=\"time\",ylabel=\"traffic\",title=L\"Linear+Seasonal Means\")\n            ax1.xticks=(tr,yr)\n            ax2.xticks=(tr,yr)\n            Box(fig[1,1];color = (:orange,0.05),strokewidth=0.5)\n            Box(fig[1,2];color = (:orange,0.05),strokewidth=0.5)\n            scatterlines!(ax1,data[:,:t],data[:,:Traffic];marker_style...,linewidth=4)\n            scatterlines!(ax2,data[:,:t],data[:,:Traffic];marker_style...,linewidth=4)\n            lines!(ax1,data[:,:t],yhat1;color=:red,linestyle=:dash,linewidth=3) \n            lines!(ax2,data[:,:t],yhat2;color=:red,linestyle=:dash,linewidth=3) \n            fig\n\n        end\n        plot_two_reg()\n\n\n\n\n\nFigure 2: two type lm fitting\n\n\n\n\n\n\n5. plot model residuals\n\n\nCode\n        \"linear-cosine  residuals\"\n        lc_resid=residuals(mds[1]) \n        \"lienar-seasonalmeans residuals\"\n        ls_resid=residuals(mds[2]) \n        \n        function plot_pair_resid()\n            yr=unique(data[:,:Year]).|&gt;Symbol.|&gt;String\n            tr=Vector(1:12:length(data[:,:t]))\n            fig=Figure(resolution=(1400,400))\n            Box(fig[1,1];color = (:orange,0.05),strokewidth=0.2)\n            Box(fig[1,2];color = (:orange,0.05),strokewidth=0.2)\n            ax1=Axis(fig[1,1];xlabel=\"time\",ylabel=\"residuals\",title=L\"Linear+Cossine\")\n            ax2=Axis(fig[1,2];xlabel=\"time\",ylabel=\"residuals\",title=L\"Linear+Seasonal Means\")\n            \n            ax1.xticks=(tr,yr)\n            ax2.xticks=(tr,yr)\n            \n            linkyaxes!(ax1, ax2)\n            lines!(ax1,ts,lc_resid)\n            lines!(ax2,ts,ls_resid)\n            hlines!(ax1,[0],linestyle=:dot, linewidth=2,color=(:red, 0.8))\n            hlines!(ax2,[0],linestyle=:dot, linewidth=2,color=(:red, 0.8))\n            fig\n\n        end\n        plot_pair_resid()\n\n\n\n\n\nFigure 3: residuals plot\n\n\n\n\n\n\n6. report \\(R^2\\) 和 \\(SE\\)\n\n\nCode\nfunction report_r2_se()\n        yhat1=predict(mds[1],select(data,:t))\n        yhat2=predict(mds[2],select(data,[:Month,:t]))\n\n        se1=rmsd(data[:,:Traffic],Float64.(yhat1))\n        se2=rmsd(data[:,:Traffic],Float64.(yhat2))\n        r21=r2(mds[1])\n        r22=r2(mds[2])\n        c1=[\"Linear Model\",\"Linear+Season Means\"]\n        c2=[r21,r22].|&gt;(d-&gt;round(d,digits=2)).|&gt;d-&gt;\"$(100*d)%\"\n        c3=[se1,se2]\n        report_table=DataFrame(Model=c1,R²=c2,SE=c3)\n        \nend\nreport_r2_se()\n\n\n2×3 DataFrame\n\n\n\nRow\nModel\nR²\nSE\n\n\n\nString\nString\nFloat64\n\n\n\n\n1\nLinear Model\n81.0%\n44.427\n\n\n2\nLinear+Season Means\n95.0%\n22.735\n\n\n\n\n\n\n\n\n7. lag-acf plot\n\\(lag\\)是时滞, \\(acf\\)是自相关系数\n\n\nCode\n        data=traffic[1:end-1]\n        lag= traffic[2:end]\n        diff=data-lag\n        \n        acf=autocor(diff)  # diff  autocor\n        function plot_acf()\n                fig=Figure(;resolution=res)\n                ax=Axis(fig[1,1];xlabel=\"Lag\",ylabel=\"ACF\",title=\"Price Lag ACF\")\n                stem!(ax,acf[2:end])\n                fig\n        end\n        plot_acf()\n\n\n\n\n\nFigure 4: lag-acf plot\n\n\n\n\n\n\n9. 结论\n\n\n\n\n\n\nTip\n\n\n\n通过使用不同的基函数对时间序列进行分解表示, 在PeaceBridge 2012 和PeaceBridge2003数据集上都获得了很好的拟合效果, 这提示我们是否 还能够使用更过类型的基函数来拟合复杂时间序列?"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/applestock/index.html",
    "href": "posts/applestock/index.html",
    "title": "apple stock timeseries",
    "section": "",
    "text": "加载软件包\n\n\nCode\ninclude(\"../utils.jl\")\nusing  RCall\nusing  GLMakie,DataFrames,Pipe,PrettyTables,DataFramesMeta,FreqTables\nusing  StatsBase,TableTransforms,Random,TimeSeries,Dates\nusing  GLM,AnovaGLM,HypothesisTests,Distributions\nRandom.seed!(34343)\n\n\nTaskLocalRNG()\n\n\n\n\n1. load data\n\n\nCode\n desc=Stat2Table(1431,\"AppleStock\",\"stock time series\",[\"Date\", \"Price\", \"Change\", \"Volume\"])\n data=@pipe load_rda(desc.name)\n display(first(data,5))\n\n\n5×4 DataFrame\n\n\n\nRow\nDate\nPrice\nChange\nVolume\n\n\n\nCat…\nFloat64\nFloat64?\nFloat64\n\n\n\n\n1\n7/21/2016\n99.43\nmissing\n32.69\n\n\n2\n7/22/2016\n98.66\n-0.77\n28.218\n\n\n3\n7/25/2016\n97.34\n-1.32\n40.291\n\n\n4\n7/26/2016\n96.67\n-0.67\n53.455\n\n\n5\n7/27/2016\n102.95\n6.28\n92.144\n\n\n\n\n\n\n\n\n2. 定义随机行走方法\n\n从\\(Normal∼(0,1.5)\\) 随机选择下一天的股价变化值\n\n\n\nCode\n        d=Normal(0,1.5)\n        \n        randomwalks=[cumsum([100,rand(d,65)...];dims=1) for i in 1:3]\n        series4=[data[:,:Price],randomwalks...] #一行真实数据, 三行随机行走数据\n\n\n4-element Vector{Vector{Float64}}:\n [99.43, 98.66, 97.34, 96.67, 102.95, 104.34, 104.21, 106.05, 104.48, 105.79  …  116.05, 116.3, 117.34, 116.98, 117.63, 117.55, 117.47, 117.12, 117.06, 116.6]\n [100.0, 99.71100522358383, 99.5379648163166, 99.40081538232396, 99.6260843041962, 100.57421151049427, 101.45881752307182, 101.91928485011391, 102.90291624439094, 106.3991772327056  …  110.33894411223798, 111.79258897743186, 113.67763209161404, 111.73746570622019, 109.0843035869679, 110.07859556120633, 112.40366720512326, 114.58166441085548, 114.51993577874079, 114.11636119130488]\n [100.0, 98.17433941107218, 97.59051556634807, 95.8476837421727, 94.836522197557, 94.85665233555892, 92.141561273334, 92.941812820688, 89.31518972137293, 88.22285746486334  …  109.90988558730332, 112.19702587168351, 112.32962867962743, 111.08286033088208, 112.51736026390181, 111.54669778407388, 111.3149652750737, 109.53103405260875, 107.74854673798316, 107.84389125005798]\n [100.0, 98.34996554119479, 99.23164731084827, 96.74499720697779, 95.93228229805187, 95.68588062044057, 98.89853362036573, 98.14984905958136, 98.44205338856115, 97.36117622011422  …  86.49517587606057, 86.14119482990043, 82.39569869009303, 81.5736868261495, 79.74510824017145, 81.04016489890297, 81.46562532936812, 81.8612215852697, 82.94571224282076, 80.89378586146861]\n\n\n\n\n3. plot 实际股价和三组随机行走数据\n\n\nCode\n\"\"\"\n    plot_series()\n    apple stock series+ 3 random walk  series from 100, \n    dist=Norml(0,1.5)\n\n\"\"\"\n    function plot_series()\n        xs=1:nrow(data)\n        fig=Figure(resolution=(900,600))\n        axs=[Axis(fig[i,j];xlabel=\"day\",ylabel=\"Price\") for i in 1:2 for j in 1:2]\n        [Box(fig[i,j];color = (:orange,0.03),strokewidth=0.5) for i in 1:2 for j in 1:2 ]\n        labels=[i==1 ? \"real\" : \"randomwalk-$i\" for i in 1:4]\n        for i in 1:4\n           lines!(axs[i],xs, series4[i], label=labels[i])\n           \n           axislegend(axs[i])\n         end\n        fig\n    end\n    plot_series()\n\n\n\n\n\nFigure 1: randomwalk\n\n\n\n\n\n\n4. 随机行走 lag-diff plot\n\n\nCode\n    function plot_difference()\n            \n            fig=Figure(resolution=(900,600))\n            axs=[Axis(fig[i,j];xlabel=\"day\",ylabel=\"Difference\") for i in 1:2 for j in 1:2]\n            [Box(fig[i,j];color = (:orange,0.03),strokewidth=0.5) for i in 1:2 for j in 1:2 ]\n            linkyaxes!(axs[1],axs[2:4]...)\n            labels=[i==1 ? \"real\" : \"randomwalk-$i\" for i in 1:4]\n            for i in 1:4\n                data=series4[i][1:end-1]\n                lag= series4[i][2:end]\n                diff=lag-data\n                lines!(axs[i],1:65, diff, label=labels[i])\n                hlines!(axs[i],[0],linewidth=3,linestyle=:dot,color=:red)\n                axislegend(axs[i])\n            end\n            fig\n    end\n\n    plot_difference()\n\n\n\n\n\nFigure 2: randomwalk-lag-diff\n\n\n\n\n\n\n5. price lag difference plot\n\n\nCode\nfunction plot_lag()\n        \n        data=series4[1][1:end-1]\n        lag= series4[1][2:end]\n        diff=lag-data\n        data2=diff[1:end-1]\n        lag2=diff[2:end]\n        \n        fig=Figure(resolution=(900,400))\n        ax1=Axis(fig[1,1];xlabel=\"Previous Price\",ylabel=\"Price\")\n        ax2=Axis(fig[1,2];xlabel=\"Previous Difference\",ylabel=\"Difference\")\n        scatter!(ax1,data,lag;marker_style...)\n        scatter!(ax2,data2,lag2;marker_style...)\n\n        fig\n\n    end\n    plot_lag()\n\n\n\n\n\nFigure 3: price-lag-diff\n\n\n\n\n\n\n6. 自相关检测\n\n\nCode\n data=series4[1][1:end-1]\n    lag= series4[1][2:end]\n    diff=lag-data\n    acf1=autocor(data)  # price  autocor\n    acf2=autocor(diff)  # diff  autocor\n    function plot_acf()\n        fig=Figure(resolution=(900,300))\n        ax1=Axis(fig[1,1];xlabel=\"Lag\",ylabel=\"ACF\",title=\"Price Lag ACF\")\n        ax2=Axis(fig[1,2];xlabel=\"Lag\",ylabel=\"ACF\",title=\"Difference Lag ACF\")\n        linkyaxes!(ax1, ax2)\n        stem!(ax1,acf1[2:end])\n        stem!(ax2,acf2[2:end])\n        fig\n    end\n    plot_acf()\n\n\n\n\n\nFigure 4: auto-correlation detect"
  },
  {
    "objectID": "posts/SeaIce/index.html",
    "href": "posts/SeaIce/index.html",
    "title": "SeaIce ts",
    "section": "",
    "text": "SeaIce time series"
  },
  {
    "objectID": "posts/SeaIce/index.html#load-data",
    "href": "posts/SeaIce/index.html#load-data",
    "title": "SeaIce ts",
    "section": "1. load data",
    "text": "1. load data\n\n\nCode\n    desc=Stat2Table(1406,\"SeaIce\",\"sea ice  time series\",[\"Year\", \"Extent\", \"Area\", \"t\"])\n    data=@pipe load_rda(desc.name)\n    @pt first(data,10)\n\n\n┌───────┬─────────┬─────────┬───────┐\n│  Year │  Extent │    Area │     t │\n│ Int32 │ Float64 │ Float64 │ Int32 │\n├───────┼─────────┼─────────┼───────┤\n│  1979 │    7.22 │    4.54 │     1 │\n│  1980 │    7.86 │    4.83 │     2 │\n│  1981 │    7.25 │    4.38 │     3 │\n│  1982 │    7.45 │    4.38 │     4 │\n│  1983 │    7.54 │    4.64 │     5 │\n│  1984 │    7.11 │    4.04 │     6 │\n│  1985 │    6.93 │    4.18 │     7 │\n│  1986 │    7.55 │    4.67 │     8 │\n│  1987 │    7.51 │    5.61 │     9 │\n│  1988 │    7.53 │    5.32 │    10 │\n└───────┴─────────┴─────────┴───────┘"
  },
  {
    "objectID": "posts/SeaIce/index.html#plot-time-extend-series",
    "href": "posts/SeaIce/index.html#plot-time-extend-series",
    "title": "SeaIce ts",
    "section": "2. plot time-extend series",
    "text": "2. plot time-extend series\n\n\nCode\n  #|label: fig-scatter\n  #|fig-cap: \"Scatter Plots\"\n  fig,ax,plt=scatterlines(data[:,:Year],data[:,:Extent];figure = (; resolution = res),\n  marker_style...)"
  },
  {
    "objectID": "posts/SeaIce/index.html#year-extent-linear-regression",
    "href": "posts/SeaIce/index.html#year-extent-linear-regression",
    "title": "SeaIce ts",
    "section": "3. Year-Extent linear regression",
    "text": "3. Year-Extent linear regression\n\n\nCode\n  model1=lm(@formula(Extent~Year), data)\n  anova(model1)\n\n\nAnalysis of Variance\n\nType 1 test / F test\n\nExtent ~ 1 + Year\n\nTable:\n───────────────────────────────────────────────────────────\n             DOF   Exp.SS  Mean Square    F value  Pr(&gt;|F|)\n───────────────────────────────────────────────────────────\n(Intercept)    1  1491.42    1491.42    4659.2523    &lt;1e-38\nYear           1    32.16      32.16     100.4752    &lt;1e-11\n(Residuals)   35    11.20       0.3201               \n───────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/SeaIce/index.html#predict-and-plot-fit-line",
    "href": "posts/SeaIce/index.html#predict-and-plot-fit-line",
    "title": "SeaIce ts",
    "section": "4. predict and plot fit line",
    "text": "4. predict and plot fit line\n\n\nCode\n        xs=select(data,:Year)\n        yhat=predict(model1,)|&gt;arr-&gt;round.(arr,digits=3)\n        lines!(ax,data[:,:Year],yhat)\n        ax.title=\"time-seaice-linear-reg\"\n        fig"
  },
  {
    "objectID": "posts/SeaIce/index.html#using-t-scale-as-predict-varible",
    "href": "posts/SeaIce/index.html#using-t-scale-as-predict-varible",
    "title": "SeaIce ts",
    "section": "5. using t scale as predict varible",
    "text": "5. using t scale as predict varible\n\n\nCode\n      model2=lm(@formula(Extent~t), data)\n\n\nStatsModels.TableRegressionModel{LinearModel{GLM.LmResp{Vector{Float64}}, GLM.DensePredChol{Float64, LinearAlgebra.CholeskyPivoted{Float64, Matrix{Float64}, Vector{Int64}}}}, Matrix{Float64}}\n\nExtent ~ 1 + t\n\nCoefficients:\n───────────────────────────────────────────────────────────────────────────\n                 Coef.  Std. Error       t  Pr(&gt;|t|)  Lower 95%   Upper 95%\n───────────────────────────────────────────────────────────────────────────\n(Intercept)   8.00802   0.189861     42.18    &lt;1e-30   7.62258    8.39346\nt            -0.087321  0.00871143  -10.02    &lt;1e-11  -0.105006  -0.0696359\n───────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/SeaIce/index.html#plot-t-scale-extent-fitline",
    "href": "posts/SeaIce/index.html#plot-t-scale-extent-fitline",
    "title": "SeaIce ts",
    "section": "6. plot t-scale-extent fitline",
    "text": "6. plot t-scale-extent fitline\n\n\nCode\n      fig2,ax2,plt2=scatterlines(data[:,:t],data[:,:Extent];marker_style...,figure = (; resolution = res))\n      xs2=select(data,:t)\n      yhat=predict(model2,xs2)|&gt;arr-&gt;round.(arr,digits=3)\n      lines!(ax2,data[:,:t],yhat)\n      ax2.title=\"time-seaice-linear-reg\"\n        fig2"
  },
  {
    "objectID": "posts/SeaIce/index.html#plot-t-scale-extent-linreg-residuals",
    "href": "posts/SeaIce/index.html#plot-t-scale-extent-linreg-residuals",
    "title": "SeaIce ts",
    "section": "7. plot t-scale-extent linreg residuals",
    "text": "7. plot t-scale-extent linreg residuals\n\n\nCode\n      resid2=residuals(model2)|&gt;arr-&gt;round.(arr,digits=3)\n      fig3,ax3,plt3= scatterlines(data[:,:t],resid2;marker_style...,figure = (; resolution = res))\n      hlines!(ax3,[0],linestyle=:dot, linewidth=2,color=(:red, 0.8))\n      ax3.title=\"t-scale-extent linreg  residuals\"\n      fig3"
  },
  {
    "objectID": "posts/SeaIce/index.html#according-to-7.-residuals-we-add-quadartic-term",
    "href": "posts/SeaIce/index.html#according-to-7.-residuals-we-add-quadartic-term",
    "title": "SeaIce ts",
    "section": "8. according to 7. residuals , we add quadartic term",
    "text": "8. according to 7. residuals , we add quadartic term\n\n\nCode\n   model3=lm(@formula(Extent~t+t^2), data)\n\n\nStatsModels.TableRegressionModel{LinearModel{GLM.LmResp{Vector{Float64}}, GLM.DensePredChol{Float64, LinearAlgebra.CholeskyPivoted{Float64, Matrix{Float64}, Vector{Int64}}}}, Matrix{Float64}}\n\nExtent ~ 1 + t + :(t ^ 2)\n\nCoefficients:\n────────────────────────────────────────────────────────────────────────────────\n                   Coef.  Std. Error      t  Pr(&gt;|t|)    Lower 95%     Upper 95%\n────────────────────────────────────────────────────────────────────────────────\n(Intercept)   7.47048     0.273792    27.29    &lt;1e-23   6.91406      8.02689\nt            -0.00462226  0.0332254   -0.14    0.8902  -0.0721445    0.0628999\nt ^ 2        -0.00217628  0.00084804  -2.57    0.0149  -0.00389971  -0.000452858\n────────────────────────────────────────────────────────────────────────────────"
  },
  {
    "objectID": "posts/SeaIce/index.html#plot-quadartic-fit",
    "href": "posts/SeaIce/index.html#plot-quadartic-fit",
    "title": "SeaIce ts",
    "section": "9. plot quadartic fit",
    "text": "9. plot quadartic fit\n\n\nCode\n            fig4,ax4,plt4=scatterlines(data[:,:t],data[:,:Extent];marker_style...,figure = (; resolution = res))\n            xs4=select(data,:t)\n            yhat4=predict(model3,xs4)|&gt;arr-&gt;round.(arr,digits=3)\n            lines!(ax4,data[:,:t],yhat4)\n            ax4.title=\"time-seaice-quad-reg\"\n            fig4"
  },
  {
    "objectID": "posts/PeaceBridge2012/index.html",
    "href": "posts/PeaceBridge2012/index.html",
    "title": "seasonal timeseries",
    "section": "",
    "text": "PeaceBridge2012 seasonal time series\n\n\n\n\n\n\nNote\n\n\n\nPeaceBridge2012 记录了PeaceBridge 大桥的通行车辆记录\n\nseasonal timeseries linear Regression\n使用 GLM.jl 线性回归方法\n\n\n\n\n加载软件包\n\n\nCode\n    include(\"utils.jl\")\n    using  RCall\n    using  GLMakie,DataFrames,Pipe,PrettyTables,DataFramesMeta,FreqTables\n    using  StatsBase,TableTransforms\n    using  GLM,AnovaGLM,HypothesisTests\n    res=(600,300)\n\n\n(600, 300)\n\n\n\n\n1. load data\n\n\nCode\n        desc=Stat2Table(1412,\"PeaceBridge2012\",\"seasonal time series\",[\"Year\", \"Month\", \"Traffic\", \"t\"])\n        data=@pipe load_rda(desc.name)\n        ts=tspan=data[:,:t]\n        @pt first(data,5)\n\n\n┌───────┬───────┬─────────┬───────┐\n│  Year │ Month │ Traffic │     t │\n│ Int32 │ Int32 │ Float64 │ Int32 │\n├───────┼───────┼─────────┼───────┤\n│  2012 │     1 │   403.2 │     1 │\n│  2012 │     2 │   409.9 │     2 │\n│  2012 │     3 │   491.7 │     3 │\n│  2012 │     4 │   470.3 │     4 │\n│  2012 │     5 │   506.2 │     5 │\n└───────┴───────┴─────────┴───────┘\n\n\n\n\n2. plot time series\n\n\nCode\n  #| fig-cap: \"series plot\"\n  #| echo: true\n  fig1,ax1,plt1=scatterlines(data[:,:t],data[:,:Traffic];marker_style...,linewidth=4,figure = (; resolution = res))\n\n\n\n\n\n从 series 图中可以看到时间序列有明显的周期性变化,因此在拟合时需要 使用周期项\n\n\n3. cos,sin tranformtion for fitting\n时间变量经过周期函数变换,\\(S\\) 由时间周期决定,如果是年就为\\(12\\) \\[Y=\\beta_0+ \\beta_1cos(\\frac{2\\pi t}{S})+\\beta_2sin(\\frac{2\\pi t}{S})+ε \\tag{1}\\]\n定义两个函数作为线性组合的基函数(basis function), 回归模型对于基函数仍然是线性组合\n\\[ X_{cos}=cos(\\frac{2\\pi t}{S}) \\tag{2.1}\\] \\[ X_{sin}=sin(\\frac{2\\pi t}{S}) \\tag{2.2}\\]\n线性模型变形为:\n\\[Y=\\beta_0+\\beta_1X_{cos}+\\beta_2X_{sin}+ε \\tag{3}\\]\n\n\nCode\n cost(t)=cos(2pi*t/12); sint(t)=sin(2pi*t/12)\n model1=lm(@formula(Traffic~cost(t)+sint(t)), data)\n\n\nStatsModels.TableRegressionModel{LinearModel{GLM.LmResp{Vector{Float64}}, GLM.DensePredChol{Float64, LinearAlgebra.CholeskyPivoted{Float64, Matrix{Float64}, Vector{Int64}}}}, Matrix{Float64}}\n\nTraffic ~ 1 + :(cost(t)) + :(sint(t))\n\nCoefficients:\n────────────────────────────────────────────────────────────────────────\n                Coef.  Std. Error      t  Pr(&gt;|t|)  Lower 95%  Upper 95%\n────────────────────────────────────────────────────────────────────────\n(Intercept)  478.325      6.06123  78.92    &lt;1e-49   466.117    490.533\ncost(t)      -78.2165     8.57187  -9.12    &lt;1e-11   -95.4812   -60.9519\nsint(t)      -61.6879     8.57187  -7.20    &lt;1e-08   -78.9525   -44.4232\n────────────────────────────────────────────────────────────────────────\n\n\n\n\n4. 周期性模型 ftest\n\n\nCode\n ftest(model1.model)\n\n\nF-test against the null model:\nF-statistic: 67.53 on 48 observations and 2 degrees of freedom, p-value: &lt;1e-13\n\n\n\n\n\n\n\n\nNote\n\n\n\n线性回归的t检验的0假设是所有回归项的系数都为0\n\n\\(h_0: 模型所有系数都为0\\)\n\\(h_a: 存在系数不为零的回归项\\)\n\n\n\n在\\(95\\%\\)置信区间下, \\(model1\\) 的\\(pvalue\\)远远小于\\(0.05\\) 所以 拒绝 0 假设, 接受备择假设:回归模型系数不全为 0\n\n\n5. linear added cos fitting\n线性模型添加 \\(cosine\\) 变换的拟合\n\n\nCode\n model2=lm(@formula(Traffic~cost(t)), data)\n function plot_cosine_fitting(fig)\n     # just cost  model\n    yhat2=predict(model2,select(data,:t))|&gt;arr-&gt;round.(arr,digits=3)\n    lines!(ax1,ts,yhat2;color=:blue,linestyle=:dot,linewidth=2,label=\"cosine variable\")\n    #axislegend(ax1)\n    fig\n end\n plot_cosine_fitting(fig1)\n\n\n\n\n\n\n周期性拟合满足条件, 但是没有达到最高值, 需要更新模型\n\n\n\n6. month season\n将每个月份处理为目录变量 ,可以表示如下:\n\\[Y=\\beta_0+\\beta_1Feb+\\beta_2Mar+\\cdots+\\beta_{11}Dec+ε  \\tag{4}\\]\n\n\n\n\n\n\nNote\n\n\n\n目录变量在 GLM.jl的方法\n    contrasts = Dict(:Month =&gt; DummyCoding())\n参见GLM文档:Categorical Variables\n\n\n\n\nCode\n model3=lm(@formula(Traffic ~Month), data, contrasts = Dict(:Month =&gt; DummyCoding()))\n\n\nStatsModels.TableRegressionModel{LinearModel{GLM.LmResp{Vector{Float64}}, GLM.DensePredChol{Float64, LinearAlgebra.CholeskyPivoted{Float64, Matrix{Float64}, Vector{Int64}}}}, Matrix{Float64}}\n\nTraffic ~ 1 + Month\n\nCoefficients:\n────────────────────────────────────────────────────────────────────────\n               Coef.  Std. Error      t  Pr(&gt;|t|)   Lower 95%  Upper 95%\n────────────────────────────────────────────────────────────────────────\n(Intercept)  383.075     12.9524  29.58    &lt;1e-26  356.806      409.344\nMonth: 2     -10.675     18.3174  -0.58    0.5637  -47.8245      26.4745\nMonth: 3      78.225     18.3174   4.27    0.0001   41.0755     115.374\nMonth: 4      64.9       18.3174   3.54    0.0011   27.7505     102.049\nMonth: 5     108.025     18.3174   5.90    &lt;1e-06   70.8755     145.174\nMonth: 6     133.475     18.3174   7.29    &lt;1e-07   96.3255     170.624\nMonth: 7     228.975     18.3174  12.50    &lt;1e-13  191.826      266.124\nMonth: 8     255.775     18.3174  13.96    &lt;1e-15  218.626      292.924\nMonth: 9     107.775     18.3174   5.88    &lt;1e-06   70.6255     144.924\nMonth: 10     99.05      18.3174   5.41    &lt;1e-05   61.9005     136.199\nMonth: 11     39.55      18.3174   2.16    0.0376    2.40052     76.6995\nMonth: 12     37.925     18.3174   2.07    0.0456    0.775517    75.0745\n────────────────────────────────────────────────────────────────────────\n\n\n\n\n\n\n\n\nNote\n\n\n\nmonth1作为常数项,回归是以1月的数据作为基准, month2:-10.675 ,意思是在二月份比一月份 少-10.675*1000车辆通行,其他月份同样处理\n\n\n\n\n7. plot month season variable\n绘制拟合曲线\n\n\nCode\n  yhat3=predict(model3,select(data,:Month))|&gt;arr-&gt;round.(arr,digits=3)\n  lines!(ax1,data[:,:t],yhat3;color=:red,linestyle=:dash,linewidth=3,label=\"seasonal variable\") \n  axislegend(ax1)\n  fig1\n\n\n\n\n\n\n\n8. plot cost, month sesaon rediduals\ncos 变换的模型与周期性变量模型模型拟合残差图\n\n\nCode\n        cost_resid=residuals(model1)\n        season_resid=residuals(model3)\n        xs4=data[:,:t]\n       function plot_pair_resid()\n          fig=Figure(resolution=(1200,300))\n          ax1=Axis(fig[1,1];xlabel=\"time\",ylabel=\"cost-rediduals\")\n          ax2=Axis(fig[1,2];xlabel=\"time\",ylabel=\"monthseason-rediduals\")\n          Box(fig[1,1];color = (:orange,0.05),strokewidth=0.5)\n          Box(fig[1,2];color = (:orange,0.05),strokewidth=0.5)\n          linkyaxes!(ax1, ax2)\n          lines!(ax1,xs4,cost_resid)\n          lines!(ax2,xs4,season_resid)\n          hlines!(ax1,[0],linestyle=:dot, linewidth=2,color=(:red, 0.8))\n          hlines!(ax2,[0],linestyle=:dot, linewidth=2,color=(:red, 0.8))\n          fig\n        end\n        plot_pair_resid()\n\n\n\n\n\n可以看到周期性模型的残差非常小\n\n\n9. cosine model 和 month season model \\(R^2\\) 的比较\n\n\nCode\nDict(:cos_model=&gt;r2(model1),:month_seasonal_model=&gt;r2(model3))\n\n\nDict{Symbol, Float64} with 2 entries:\n  :month_seasonal_model =&gt; 0.923915\n  :cos_model            =&gt; 0.750072"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Julia-TimeSeries",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n\n\n\n\n  \n\n\n\n\napple stock timeseries\n\n\n\n\n\n\n\njulia\n\n\ntimeseries\n\n\nstat2\n\n\n\n\n\n\n\n\n\n\n\nSep 7, 2023\n\n\nmath4mads\n\n\n\n\n\n\n  \n\n\n\n\nSeaIce ts\n\n\n\n\n\n\n\njulia\n\n\ntimeseries\n\n\nstat2\n\n\n\n\n\n\n\n\n\n\n\nSep 7, 2023\n\n\nmath4mads\n\n\n\n\n\n\n  \n\n\n\n\nseasonal timeseries\n\n\n\n\n\n\n\njulia\n\n\ntimeseries\n\n\nstat2\n\n\n\n\n\n\n\n\n\n\n\nSep 7, 2023\n\n\nmath4mads\n\n\n\n\n\n\n  \n\n\n\n\nlonger seasonal timeseries\n\n\n\n\n\n\n\njulia\n\n\ntimeseries\n\n\nstat2\n\n\n\n\n\n\n\n\n\n\n\nSep 7, 2023\n\n\nmath4mads\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nSep 4, 2023\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  }
]