{
  "hash": "a7fe2439125df95e6567e5f51528354a",
  "result": {
    "markdown": "---\ntitle: SeaIce ts\nauthor: math4mads\ndate: '2023-09-07'\ncategories:\n  - julia\n  - timeseries\n  - stat2\nformat:\n  html:\n    code-fold: true\nimage: image.png\n---\n\nSeaIce  time series\n\n:::{.callout-note}\n   - SeaIce Time Linear Regression\n   - 使用 GLM.jl 线性回归方法\n   \n:::\n\n\n\n#### 加载软件包\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\n    include(\"utils.jl\")\n    using  RCall\n    using  GLMakie,DataFrames,Pipe,PrettyTables,DataFramesMeta,FreqTables\n    using  StatsBase,TableTransforms\n    using  GLM,AnovaGLM,HypothesisTests\n    res=(600,300)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n(600, 300)\n```\n:::\n:::\n\n\n## 1.   load data\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\n    desc=Stat2Table(1406,\"SeaIce\",\"sea ice  time series\",[\"Year\", \"Extent\", \"Area\", \"t\"])\n    data=@pipe load_rda(desc.name)\n    @pt first(data,10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n┌───────┬─────────┬─────────┬───────┐\n│  Year │  Extent │    Area │     t │\n│ Int32 │ Float64 │ Float64 │ Int32 │\n├───────┼─────────┼─────────┼───────┤\n│  1979 │    7.22 │    4.54 │     1 │\n│  1980 │    7.86 │    4.83 │     2 │\n│  1981 │    7.25 │    4.38 │     3 │\n│  1982 │    7.45 │    4.38 │     4 │\n│  1983 │    7.54 │    4.64 │     5 │\n│  1984 │    7.11 │    4.04 │     6 │\n│  1985 │    6.93 │    4.18 │     7 │\n│  1986 │    7.55 │    4.67 │     8 │\n│  1987 │    7.51 │    5.61 │     9 │\n│  1988 │    7.53 │    5.32 │    10 │\n└───────┴─────────┴─────────┴───────┘\n```\n:::\n:::\n\n\n## 2. plot  time-extend series\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\n  #|label: fig-scatter\n  #|fig-cap: \"Scatter Plots\"\n  fig,ax,plt=scatterlines(data[:,:Year],data[:,:Extent];figure = (; resolution = res),\n  marker_style...)\n\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n![](index_files/figure-html/cell-4-output-1.png){}\n:::\n:::\n\n\n##  3.   Year-Extent  linear regression\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\n  model1=lm(@formula(Extent~Year), data)\n  anova(model1)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nAnalysis of Variance\n\nType 1 test / F test\n\nExtent ~ 1 + Year\n\nTable:\n───────────────────────────────────────────────────────────\n             DOF   Exp.SS  Mean Square    F value  Pr(>|F|)\n───────────────────────────────────────────────────────────\n(Intercept)    1  1491.42    1491.42    4659.2523    <1e-38\nYear           1    32.16      32.16     100.4752    <1e-11\n(Residuals)   35    11.20       0.3201               \n───────────────────────────────────────────────────────────\n\n```\n:::\n:::\n\n\n## 4.   predict and plot fit line\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\n        xs=select(data,:Year)\n        yhat=predict(model1,)|>arr->round.(arr,digits=3)\n        lines!(ax,data[:,:Year],yhat)\n        ax.title=\"time-seaice-linear-reg\"\n        fig\n\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n![](index_files/figure-html/cell-6-output-1.png){}\n:::\n:::\n\n\n## 5.   using t scale as predict varible\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\n      model2=lm(@formula(Extent~t), data)\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\nStatsModels.TableRegressionModel{LinearModel{GLM.LmResp{Vector{Float64}}, GLM.DensePredChol{Float64, LinearAlgebra.CholeskyPivoted{Float64, Matrix{Float64}, Vector{Int64}}}}, Matrix{Float64}}\n\nExtent ~ 1 + t\n\nCoefficients:\n───────────────────────────────────────────────────────────────────────────\n                 Coef.  Std. Error       t  Pr(>|t|)  Lower 95%   Upper 95%\n───────────────────────────────────────────────────────────────────────────\n(Intercept)   8.00802   0.189861     42.18    <1e-30   7.62258    8.39346\nt            -0.087321  0.00871143  -10.02    <1e-11  -0.105006  -0.0696359\n───────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n\n## 6.   plot t-scale-extent fitline\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\n      fig2,ax2,plt2=scatterlines(data[:,:t],data[:,:Extent];marker_style...,figure = (; resolution = res))\n      xs2=select(data,:t)\n      yhat=predict(model2,xs2)|>arr->round.(arr,digits=3)\n      lines!(ax2,data[:,:t],yhat)\n      ax2.title=\"time-seaice-linear-reg\"\n        fig2\n\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n![](index_files/figure-html/cell-8-output-1.png){}\n:::\n:::\n\n\n## 7.   plot t-scale-extent linreg  residuals\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\n      resid2=residuals(model2)|>arr->round.(arr,digits=3)\n      fig3,ax3,plt3= scatterlines(data[:,:t],resid2;marker_style...,figure = (; resolution = res))\n      hlines!(ax3,[0],linestyle=:dot, linewidth=2,color=(:red, 0.8))\n      ax3.title=\"t-scale-extent linreg  residuals\"\n      fig3\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n![](index_files/figure-html/cell-9-output-1.png){}\n:::\n:::\n\n\n## 8.   according to 7. residuals , we add  quadartic term\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\n   model3=lm(@formula(Extent~t+t^2), data)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\nStatsModels.TableRegressionModel{LinearModel{GLM.LmResp{Vector{Float64}}, GLM.DensePredChol{Float64, LinearAlgebra.CholeskyPivoted{Float64, Matrix{Float64}, Vector{Int64}}}}, Matrix{Float64}}\n\nExtent ~ 1 + t + :(t ^ 2)\n\nCoefficients:\n────────────────────────────────────────────────────────────────────────────────\n                   Coef.  Std. Error      t  Pr(>|t|)    Lower 95%     Upper 95%\n────────────────────────────────────────────────────────────────────────────────\n(Intercept)   7.47048     0.273792    27.29    <1e-23   6.91406      8.02689\nt            -0.00462226  0.0332254   -0.14    0.8902  -0.0721445    0.0628999\nt ^ 2        -0.00217628  0.00084804  -2.57    0.0149  -0.00389971  -0.000452858\n────────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n\n## 9.    plot  quadartic  fit  \n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\n            fig4,ax4,plt4=scatterlines(data[:,:t],data[:,:Extent];marker_style...,figure = (; resolution = res))\n            xs4=select(data,:t)\n            yhat4=predict(model3,xs4)|>arr->round.(arr,digits=3)\n            lines!(ax4,data[:,:t],yhat4)\n            ax4.title=\"time-seaice-quad-reg\"\n            fig4\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n![](index_files/figure-html/cell-11-output-1.png){}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}