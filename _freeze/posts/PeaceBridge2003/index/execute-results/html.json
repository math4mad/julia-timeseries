{
  "hash": "ab81861ab1225fd578ec4f4921289dcc",
  "result": {
    "markdown": "---\ntitle: longer seasonal timeseries\nauthor: math4mads\ndate: '2023-09-07'\ncategories:\n  - julia\n  - timeseries\n  - stat2\nformat:\n  html:\n    code-fold: true\nimage: p1421-two-model-timeseries.png\n---\n\nPeaceBridge2012 seasonal   time series\n\n:::{.callout-note}\n   **PeaceBridge2003** 记录了PeaceBridge 大桥的长期的通行车辆记录\n   \n   - seasonal timeseries  linear Regression\n   - 使用 GLM.jl 线性回归方法\n   \n:::\n\n#### 加载软件包\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\n    include(\"utils.jl\")\n    using  RCall\n    using  GLMakie,DataFrames,Pipe,PrettyTables,DataFramesMeta,FreqTables\n    using  StatsBase,TableTransforms\n    using  GLM,AnovaGLM,HypothesisTests\n    res=(600,300)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n(600, 300)\n```\n:::\n:::\n\n\n###   1.    load data\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\n        desc=Stat2Table(1412,\"PeaceBridge2003\",\"seasonal time series\",[\"Year\", \"Month\", \"Traffic\", \"t\"])\n        data=@pipe load_rda(desc.name)\n        ts=tspan=data[:,:t]\n        traffic=data[:,:Traffic]\n        @pt first(data,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n┌───────┬───────┬─────────┬───────┐\n│  Year │ Month │ Traffic │     t │\n│ Int32 │ Int32 │ Float64 │ Int32 │\n├───────┼───────┼─────────┼───────┤\n│  2003 │     1 │   511.4 │     1 │\n│  2003 │     2 │   468.7 │     2 │\n│  2003 │     3 │   551.4 │     3 │\n└───────┴───────┴─────────┴───────┘\n```\n:::\n:::\n\n\n### 2. plot  timerseries\n   @fig-pb2003-1 :   PeaceBridge2003 series plot\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\n fig1,ax1,plt1=scatterlines(data[:,:t],data[:,:Traffic];marker_style...,linewidth=4,figure = (; resolution = res))\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n![PeaceBridge2003](index_files/figure-html/fig-pb2003-1-output-1.png){#fig-pb2003-1}\n:::\n:::\n\n\n### 3. fit two models:  1:cosine model 2: season model\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\n        cost(t)=cos(2pi*t/12); sint(t)=sin(2pi*t/12)\n        cosine_model=lm(@formula(Traffic~t+cost(t)+sint(t)), data)\n        season_model=lm(@formula(Traffic ~t+Month), data, contrasts = Dict(:Month => DummyCoding()))\n        mds=[cosine_model,season_model]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n2-element Vector{StatsModels.TableRegressionModel{LinearModel{GLM.LmResp{Vector{Float64}}, GLM.DensePredChol{Float64, LinearAlgebra.CholeskyPivoted{Float64, Matrix{Float64}, Vector{Int64}}}}, Matrix{Float64}}}:\n StatsModels.TableRegressionModel{LinearModel{GLM.LmResp{Vector{Float64}}, GLM.DensePredChol{Float64, LinearAlgebra.CholeskyPivoted{Float64, Matrix{Float64}, Vector{Int64}}}}, Matrix{Float64}}\n\nTraffic ~ 1 + t + :(cost(t)) + :(sint(t))\n\nCoefficients:\n────────────────────────────────────────────────────────────────────────────\n                  Coef.  Std. Error       t  Pr(>|t|)  Lower 95%   Upper 95%\n────────────────────────────────────────────────────────────────────────────\n(Intercept)  601.503       7.25186    82.94    <1e-99  587.176    615.831\nt             -0.980999    0.080168  -12.24    <1e-23   -1.13939   -0.822612\ncost(t)      -86.3254      5.09676   -16.94    <1e-36  -96.395    -76.2558\nsint(t)      -77.77        5.1049    -15.23    <1e-31  -87.8557   -67.6843\n────────────────────────────────────────────────────────────────────────────\n StatsModels.TableRegressionModel{LinearModel{GLM.LmResp{Vector{Float64}}, GLM.DensePredChol{Float64, LinearAlgebra.CholeskyPivoted{Float64, Matrix{Float64}, Vector{Int64}}}}, Matrix{Float64}}\n\nTraffic ~ 1 + t + Month\n\nCoefficients:\n────────────────────────────────────────────────────────────────────────────\n                  Coef.  Std. Error       t  Pr(>|t|)  Lower 95%   Upper 95%\n────────────────────────────────────────────────────────────────────────────\n(Intercept)  490.857       7.27524    67.47    <1e-99  476.476    505.238\nt             -0.978972    0.042343  -23.12    <1e-49   -1.06267   -0.895273\nMonth: 2     -10.1672      9.31403    -1.09    0.2768  -28.5781     8.24378\nMonth: 3      82.1964      9.31431     8.82    <1e-14   63.7849   100.608\nMonth: 4      64.4831      9.3148      6.92    <1e-09   46.0706    82.8956\nMonth: 5     119.608       9.31547    12.84    <1e-24  101.194    138.022\nMonth: 6     150.703       9.31633    16.18    <1e-33  132.287    169.118\nMonth: 7     268.635       9.31739    28.83    <1e-60  250.218    287.053\nMonth: 8     296.714       9.31864    31.84    <1e-66  278.294    315.134\nMonth: 9     133.001       9.32009    14.27    <1e-28  114.578    151.424\nMonth: 10    115.057       9.32172    12.34    <1e-23   96.6307   133.483\nMonth: 11     63.382       9.32355     6.80    <1e-09   44.9522    81.8118\nMonth: 12     42.2302      9.32557     4.53    <1e-04   23.7965    60.664\n────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n\n### 4. plot  fitline\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\n        yhat1=predict(mds[1],select(data,:t))\n        yhat2=predict(mds[2],select(data,[:Month,:t]))\n        function plot_two_reg()\n            yr=unique(data[:,:Year]).|>Symbol.|>String\n            tr=Vector(1:12:length(data[:,:t]))\n            fig=Figure(resolution=(1400,400))\n            ax1=Axis(fig[1,1];xlabel=\"time\",ylabel=\"traffic\",title=L\"Linear+Cossine\")\n            ax2=Axis(fig[1,2];xlabel=\"time\",ylabel=\"traffic\",title=L\"Linear+Seasonal Means\")\n            ax1.xticks=(tr,yr)\n            ax2.xticks=(tr,yr)\n            Box(fig[1,1];color = (:orange,0.05),strokewidth=0.5)\n            Box(fig[1,2];color = (:orange,0.05),strokewidth=0.5)\n            scatterlines!(ax1,data[:,:t],data[:,:Traffic];marker_style...,linewidth=4)\n            scatterlines!(ax2,data[:,:t],data[:,:Traffic];marker_style...,linewidth=4)\n            lines!(ax1,data[:,:t],yhat1;color=:red,linestyle=:dash,linewidth=3) \n            lines!(ax2,data[:,:t],yhat2;color=:red,linestyle=:dash,linewidth=3) \n            fig\n\n        end\n        plot_two_reg()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n![two type lm fitting](index_files/figure-html/fig-pb2003-2-output-1.png){#fig-pb2003-2}\n:::\n:::\n\n\n### 5. plot model residuals\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\n        \"linear-cosine  residuals\"\n        lc_resid=residuals(mds[1]) \n        \"lienar-seasonalmeans residuals\"\n        ls_resid=residuals(mds[2]) \n        \n        function plot_pair_resid()\n            yr=unique(data[:,:Year]).|>Symbol.|>String\n            tr=Vector(1:12:length(data[:,:t]))\n            fig=Figure(resolution=(1400,400))\n            Box(fig[1,1];color = (:orange,0.05),strokewidth=0.2)\n            Box(fig[1,2];color = (:orange,0.05),strokewidth=0.2)\n            ax1=Axis(fig[1,1];xlabel=\"time\",ylabel=\"residuals\",title=L\"Linear+Cossine\")\n            ax2=Axis(fig[1,2];xlabel=\"time\",ylabel=\"residuals\",title=L\"Linear+Seasonal Means\")\n            \n            ax1.xticks=(tr,yr)\n            ax2.xticks=(tr,yr)\n            \n            linkyaxes!(ax1, ax2)\n            lines!(ax1,ts,lc_resid)\n            lines!(ax2,ts,ls_resid)\n            hlines!(ax1,[0],linestyle=:dot, linewidth=2,color=(:red, 0.8))\n            hlines!(ax2,[0],linestyle=:dot, linewidth=2,color=(:red, 0.8))\n            fig\n\n        end\n        plot_pair_resid()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n![residuals  plot](index_files/figure-html/fig-pb2003-3-output-1.png){#fig-pb2003-3}\n:::\n:::\n\n\n### 6. report $R^2$ 和  $SE$\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\nfunction report_r2_se()\n        yhat1=predict(mds[1],select(data,:t))\n        yhat2=predict(mds[2],select(data,[:Month,:t]))\n\n        se1=rmsd(data[:,:Traffic],Float64.(yhat1))\n        se2=rmsd(data[:,:Traffic],Float64.(yhat2))\n        r21=r2(mds[1])\n        r22=r2(mds[2])\n        c1=[\"Linear Model\",\"Linear+Season Means\"]\n        c2=[r21,r22].|>(d->round(d,digits=2)).|>d->\"$(100*d)%\"\n        c3=[se1,se2]\n        report_table=DataFrame(Model=c1,R²=c2,SE=c3)\n        \nend\nreport_r2_se()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div><div style = \"float: left;\"><span>2×3 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">Model</th><th style = \"text-align: left;\">R²</th><th style = \"text-align: left;\">SE</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"String\" style = \"text-align: left;\">String</th><th title = \"String\" style = \"text-align: left;\">String</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">Linear Model</td><td style = \"text-align: left;\">81.0%</td><td style = \"text-align: right;\">44.427</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">Linear+Season Means</td><td style = \"text-align: left;\">95.0%</td><td style = \"text-align: right;\">22.735</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n### 7.  lag-acf plot\n$lag$是时滞, $acf$是自相关系数\n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\n        data=traffic[1:end-1]\n        lag= traffic[2:end]\n        diff=data-lag\n        \n        acf=autocor(diff)  # diff  autocor\n        function plot_acf()\n                fig=Figure(;resolution=res)\n                ax=Axis(fig[1,1];xlabel=\"Lag\",ylabel=\"ACF\",title=\"Price Lag ACF\")\n                stem!(ax,acf[2:end])\n                fig\n        end\n        plot_acf()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n![lag-acf plot](index_files/figure-html/fig-pb2003-4-output-1.png){#fig-pb2003-4}\n:::\n:::\n\n\n### 9. 结论\n\n:::{.callout-tip}\n    \n   通过使用不同的基函数对时间序列进行分解表示, 在PeaceBridge 2012 \n   和PeaceBridge2003数据集上都获得了很好的拟合效果, 这提示我们是否\n   还能够使用更过类型的基函数来拟合复杂时间序列?\n:::\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}