---
title: "apple stock timeseries"
author: "math4mads"
date: "2023-09-07"
categories: [julia,timeseries, stat2]
format:
  html:
    code-fold: true
    
image: "p1431-pricelag-diff-lag.png"
jupyter: julia-1.9
---



##### 加载软件包
```{julia}
include("../utils.jl")
using  RCall
using  GLMakie,DataFrames,Pipe,PrettyTables,DataFramesMeta,FreqTables
using  StatsBase,TableTransforms,Random,TimeSeries,Dates
using  GLM,AnovaGLM,HypothesisTests,Distributions
Random.seed!(34343)
```

### 1.  load data

```{julia}
 desc=Stat2Table(1431,"AppleStock","stock time series",["Date", "Price", "Change", "Volume"])
 data=@pipe load_rda(desc.name)
 display(first(data,5))
```
###  2. 定义随机行走方法
>从$Normal∼(0,1.5)$ 随机选择下一天的股价变化值
    
```{julia}
        d=Normal(0,1.5)
        
        randomwalks=[cumsum([100,rand(d,65)...];dims=1) for i in 1:3]
        series4=[data[:,:Price],randomwalks...] #一行真实数据, 三行随机行走数据
```
    
### 3. plot 实际股价和三组随机行走数据   
```{julia}
#| label: fig-applestock-1
#| fig-cap: "randomwalk"
"""
    plot_series()
    apple stock series+ 3 random walk  series from 100, 
    dist=Norml(0,1.5)

"""
    function plot_series()
        xs=1:nrow(data)
        fig=Figure(resolution=(900,600))
        axs=[Axis(fig[i,j];xlabel="day",ylabel="Price") for i in 1:2 for j in 1:2]
        [Box(fig[i,j];color = (:orange,0.03),strokewidth=0.5) for i in 1:2 for j in 1:2 ]
        labels=[i==1 ? "real" : "randomwalk-$i" for i in 1:4]
        for i in 1:4
           lines!(axs[i],xs, series4[i], label=labels[i])
           
           axislegend(axs[i])
         end
        fig
    end
    plot_series()
``` 

### 4. 随机行走 lag-diff plot

```{julia}
#| label: fig-applestock-2
#| fig-cap: "randomwalk-lag-diff"

    function plot_difference()
            
            fig=Figure(resolution=(900,600))
            axs=[Axis(fig[i,j];xlabel="day",ylabel="Difference") for i in 1:2 for j in 1:2]
            [Box(fig[i,j];color = (:orange,0.03),strokewidth=0.5) for i in 1:2 for j in 1:2 ]
            linkyaxes!(axs[1],axs[2:4]...)
            labels=[i==1 ? "real" : "randomwalk-$i" for i in 1:4]
            for i in 1:4
                data=series4[i][1:end-1]
                lag= series4[i][2:end]
                diff=lag-data
                lines!(axs[i],1:65, diff, label=labels[i])
                hlines!(axs[i],[0],linewidth=3,linestyle=:dot,color=:red)
                axislegend(axs[i])
            end
            fig
    end

    plot_difference()
```

### 5. price lag  difference plot

```{julia}
#| label: fig-applestock-3
#| fig-cap: "price-lag-diff"
function plot_lag()
        
        data=series4[1][1:end-1]
        lag= series4[1][2:end]
        diff=lag-data
        data2=diff[1:end-1]
        lag2=diff[2:end]
        
        fig=Figure(resolution=(900,400))
        ax1=Axis(fig[1,1];xlabel="Previous Price",ylabel="Price")
        ax2=Axis(fig[1,2];xlabel="Previous Difference",ylabel="Difference")
        scatter!(ax1,data,lag;marker_style...)
        scatter!(ax2,data2,lag2;marker_style...)

        fig

    end
    plot_lag()
```

### 6.  自相关检测
```{julia}
#| label: fig-applestock-4
#| fig-cap: "auto-correlation detect"
 data=series4[1][1:end-1]
    lag= series4[1][2:end]
    diff=lag-data
    acf1=autocor(data)  # price  autocor
    acf2=autocor(diff)  # diff  autocor
    function plot_acf()
        fig=Figure(resolution=(900,300))
        ax1=Axis(fig[1,1];xlabel="Lag",ylabel="ACF",title="Price Lag ACF")
        ax2=Axis(fig[1,2];xlabel="Lag",ylabel="ACF",title="Difference Lag ACF")
        linkyaxes!(ax1, ax2)
        stem!(ax1,acf1[2:end])
        stem!(ax2,acf2[2:end])
        fig
    end
    plot_acf()
```

